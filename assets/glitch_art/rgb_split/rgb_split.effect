// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
techniques:
  - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
            - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
precision mediump float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
out vec4 v_pos;

#if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
#endif

void main() {
  vec4 pos = vec4(a_position, 1);
  
  #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif
  
  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif
  
  v_color = a_color;
  v_pos = pos;
  
  gl_Position = pos;
}
}%


CCProgram fs %{
precision mediump float;

#include <cc-global>
#include <cc-local>
#include <alpha-test>
#include <texture>

in vec4 v_pos;

#if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
#endif


float randomNoise(float x, float y)
{
	return mod(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453, 1.0);
}

void main() {
  vec4 colorR = vec4(0.0);
  vec4 colorG = vec4(0.0);
  vec4 colorB = vec4(0.0);
  
  float splitAmout = (1.0 + sin(cc_time.x * 6.0)) * 0.5;
	splitAmout *= 1.0 + sin(cc_time.x * 16.0) * 0.5;
	splitAmout *= 1.0 + sin(cc_time.x * 19.0) * 0.5;
	splitAmout *= 1.0 + sin(cc_time.x * 27.0) * 0.5;
	splitAmout = pow(splitAmout, 10.0);
	splitAmout *= (0.05 * 10.0);

  colorR = texture2D(texture, vec2(v_uv0.x + splitAmout, v_uv0.y));
  colorG = texture2D(texture,  vec2(v_uv0.x, v_uv0.y));
  colorB = texture2D(texture, vec2(v_uv0.x - splitAmout, v_uv0.y));

  vec3 colorFinal = mix(vec3(colorR.r, colorG.g, colorB.b), colorG.rgb, .2);

  gl_FragColor = vec4(colorFinal, 1.0);
}
}%
