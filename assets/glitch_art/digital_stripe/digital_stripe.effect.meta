{
  "ver": "1.0.27",
  "uuid": "a17933a7-f22f-41d1-9344-f261a67f74f3",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision mediump float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_pos;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_pos = pos;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_pos;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform sampler2D noiseTexture;\nvoid main() {\n  vec4 noiseColor = texture2D(noiseTexture, v_uv0);\n  float threshold = 0.8;\n  float uvShift = step(threshold, pow(abs(noiseColor.x), 3.0));\n  vec2 st = fract(v_uv0.xy + noiseColor.yz * uvShift);\n  vec4 color = texture2D(texture, st);\n  float stripIndensity = step(threshold, pow(abs(noiseColor.w), 10.0)) * 0.1;\n  vec3 colorG = mix(color.rgb, noiseColor.rgb, stripIndensity);\n  gl_FragColor = vec4(colorG.r, colorG.g, colorG.b, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision mediump float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_pos;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_pos = pos;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_pos;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform sampler2D noiseTexture;\nvoid main() {\n  vec4 noiseColor = texture2D(noiseTexture, v_uv0);\n  float threshold = 0.8;\n  float uvShift = step(threshold, pow(abs(noiseColor.x), 3.0));\n  vec2 st = fract(v_uv0.xy + noiseColor.yz * uvShift);\n  vec4 color = texture2D(texture, st);\n  float stripIndensity = step(threshold, pow(abs(noiseColor.w), 10.0)) * 0.1;\n  vec3 colorG = mix(color.rgb, noiseColor.rgb, stripIndensity);\n  gl_FragColor = vec4(colorG.r, colorG.g, colorG.b, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}