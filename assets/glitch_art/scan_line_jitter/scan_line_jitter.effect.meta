{
  "ver": "1.0.27",
  "uuid": "553b353b-380c-49d6-a44b-499ea7369cf4",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision mediump float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_pos;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_pos = pos;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_pos;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nfloat randomNoise(float x, float y)\n{\n  return mod(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453, 1.0);\n}\nvoid main() {\n  vec2 st = v_uv0.xy * 1.0;\n  float jitter = randomNoise(st.y, cc_time.x) * 2.0 - 1.0;\n  vec4 colorG = texture2D(texture, mod(st + vec2(jitter, 0.0), 1.0));\n  gl_FragColor = vec4(colorG.r, colorG.g, colorG.b, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision mediump float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_pos;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_pos = pos;\n  gl_Position = pos;\n}",
        "frag": "\nprecision mediump float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_pos;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nfloat randomNoise(float x, float y)\n{\n  return mod(sin(dot(vec2(x, y), vec2(12.9898, 78.233))) * 43758.5453, 1.0);\n}\nvoid main() {\n  vec2 st = v_uv0.xy * 1.0;\n  float jitter = randomNoise(st.y, cc_time.x) * 2.0 - 1.0;\n  vec4 colorG = texture2D(texture, mod(st + vec2(jitter, 0.0), 1.0));\n  gl_FragColor = vec4(colorG.r, colorG.g, colorG.b, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}