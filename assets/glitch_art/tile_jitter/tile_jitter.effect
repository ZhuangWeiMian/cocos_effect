// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
techniques:
  - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
            - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
precision mediump float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
out vec4 v_pos;

#if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
#endif

void main() {
  vec4 pos = vec4(a_position, 1);
  
  #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif
  
  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif
  
  v_color = a_color;
  v_pos = pos;
  
  gl_Position = pos;
}
}%


CCProgram fs %{
precision mediump float;

#include <cc-global>
#include <cc-local>
#include <alpha-test>
#include <texture>

in vec4 v_pos;

#if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
#endif

void main() {
  vec2 st = v_uv0.xy * 1.0;
  
  float strength = .1;
  float splitNumber = 10.0;
  float pixelSizeX = .5;
  float speed = 50.0;

  // 划分变化区域 通过调整uv采样的位置 模拟了屏幕信号的块状抖动传输故障
  if (mod(st.y * splitNumber, 2.0) < 1.0)
  {
    st.x += pixelSizeX * cos(cc_time.x * speed) * strength;
  }
  
  vec4 colorG = texture2D(texture, vec2(st.x, st.y));
  
  gl_FragColor = vec4(colorG.r, colorG.g, colorG.b, 1.0);
}
}%
