{
  "ver": "1.0.27",
  "uuid": "28b69f85-1e71-45c2-924a-2bc975d2c9d2",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_texCoord;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_texCoord = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nuniform vec2 textureSize;\nuniform float blurSize;\nvarying vec2 v_texCoord;\nfloat gaussian(float x, float sigma) {\n  return (1.0 / sqrt(2.0 * 3.141592 * sigma * sigma)) * exp(-(x * x) / (2.0 * sigma * sigma));\n}\nvoid main () {\n  float sigma = blurSize * 0.5;\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  float halfBlur = blurSize * 0.5;\n  const int MAX_BLUR_SIZE = 10;\n  for (int x = -MAX_BLUR_SIZE; x <= MAX_BLUR_SIZE; ++x) {\n    if (abs(float(x)) > halfBlur) continue;\n    float weight = gaussian(float(x), sigma);\n    color += texture2D(texture, v_texCoord + vec2(x, 0.0) / textureSize) * weight;\n    total += weight;\n  }\n  gl_FragColor = color / total;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_texCoord;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_texCoord = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform sampler2D texture;\nuniform FragConstants {\n  vec2 textureSize;\n  float blurSize;\n};\nin vec2 v_texCoord;\nfloat gaussian(float x, float sigma) {\n  return (1.0 / sqrt(2.0 * 3.141592 * sigma * sigma)) * exp(-(x * x) / (2.0 * sigma * sigma));\n}\nvoid main () {\n  float sigma = blurSize * 0.5;\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  float halfBlur = blurSize * 0.5;\n  const int MAX_BLUR_SIZE = 10;\n  for (int x = -MAX_BLUR_SIZE; x <= MAX_BLUR_SIZE; ++x) {\n    if (abs(float(x)) > halfBlur) continue;\n    float weight = gaussian(float(x), sigma);\n    color += texture2D(texture, v_texCoord + vec2(x, 0.0) / textureSize) * weight;\n    total += weight;\n  }\n  gl_FragColor = color / total;\n}"
      }
    }
  ],
  "subMetas": {}
}