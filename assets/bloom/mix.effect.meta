{
  "ver": "1.0.27",
  "uuid": "aff10dd9-a5a7-41e1-9229-3696db8fe19c",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D mixTexture;\nuniform float aspectRatio;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 originColor = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    originColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    originColor.a *= texture_tmp.a;\n  #else\n    originColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 mixColor = vec4(1.0);\n  vec4 mixTexture_tmp = texture2D(mixTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_mixTexture\n      mixTexture_tmp.a *= texture2D(mixTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    mixColor.rgb *= (mixTexture_tmp.rgb * mixTexture_tmp.rgb);\n    mixColor.a *= mixTexture_tmp.a;\n  #else\n    mixColor *= mixTexture_tmp;\n  #endif\n  vec4 o = vec4(originColor.rgb +  mixColor.rgb *  aspectRatio, 1.0);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D mixTexture;\nuniform FragConstants {\n  float aspectRatio;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 originColor = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    originColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    originColor.a *= texture_tmp.a;\n  #else\n    originColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 mixColor = vec4(1.0);\n  vec4 mixTexture_tmp = texture(mixTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_mixTexture\n      mixTexture_tmp.a *= texture(mixTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    mixColor.rgb *= (mixTexture_tmp.rgb * mixTexture_tmp.rgb);\n    mixColor.a *= mixTexture_tmp.a;\n  #else\n    mixColor *= mixTexture_tmp;\n  #endif\n  vec4 o = vec4(originColor.rgb +  mixColor.rgb *  aspectRatio, 1.0);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}